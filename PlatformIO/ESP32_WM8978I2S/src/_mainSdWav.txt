#include <Arduino.h>
#include <SdFat.h>
#include <Wire.h>
//#include "driver/i2s.h"
#include "freertos/queue.h"
#include "I2S.h"
#include "WM8978.h"

//TTGO T-Audio SD pinout
#define _SD_MOSI 15
#define _SD_MISO 2
#define _SD_SCK  14
#define _SD_CS   13

#define CCCC(c1, c2, c3, c4)    ((c4 << 24) | (c3 << 16) | (c2 << 8) | c1)

/* these are data structures to process wav file */
typedef enum headerState_e {
    HEADER_RIFF, HEADER_FMT, HEADER_DATA, DATA
} headerState_t;

typedef struct wavRiff_s {
    uint32_t chunkID;
    uint32_t chunkSize;
    uint32_t format;
} wavRiff_t;

typedef struct wavProperties_s {
    uint32_t chunkID;
    uint32_t chunkSize;
    uint16_t audioFormat;
    uint16_t numChannels;
    uint32_t sampleRate;
    uint32_t byteRate;
    uint16_t blockAlign;
    uint16_t bitsPerSample;
} wavProperties_t;
/* variables hold file, state of process wav file and wav file properties */    

//Use software SPI for accessing SD
#if ENABLE_SOFTWARE_SPI_CLASS
SdFatSoftSpi<_SD_MISO, _SD_MOSI, _SD_SCK> SD;
#endif
File wav;

headerState_t state = HEADER_RIFF;
wavProperties_t wavProps;

//i2s configuration 
int i2s_num = 0; // i2s port number
i2s_config_t i2s_config = {
     .mode = (i2s_mode_t)(I2S_MODE_MASTER | I2S_MODE_TX),
     .sample_rate = 44100,
     .bits_per_sample = I2S_BITS_PER_SAMPLE_16BIT,
     .channel_format = I2S_CHANNEL_FMT_RIGHT_LEFT,
     .communication_format = (i2s_comm_format_t)(I2S_COMM_FORMAT_I2S | I2S_COMM_FORMAT_I2S_MSB),
     .intr_alloc_flags = ESP_INTR_FLAG_LEVEL1, // high interrupt priority
     .dma_buf_count = 3,
     .dma_buf_len = 512   //Interrupt level 1
    };
    
i2s_pin_config_t pin_config = {
    .bck_io_num = PIN_I2S_BCLK,
    .ws_io_num = PIN_I2S_LRC,
    .data_out_num = PIN_I2S_DOUT,
    .data_in_num = -1   //Not used
};
//
void debug(uint8_t *buf, int len){
  for(int i=0;i<len;i++){
    Serial.print(buf[i], HEX);
    Serial.print("\t");
  }
  Serial.println();
}
/* write sample data to I2S */
int i2s_write_sample_nb(uint32_t sample){
  return i2s_write_bytes((i2s_port_t)i2s_num, (const char *)&sample, sizeof(uint32_t), 100);
}
/* read 4 bytes of data from wav file */
int read4bytes(File file, uint32_t *chunkId){
  int n = file.read((uint8_t *)chunkId, sizeof(uint32_t));
  return n;
}

/* these are function to process wav file */
int readRiff(File file, wavRiff_t *wavRiff){
  int n = file.read((uint8_t *)wavRiff, sizeof(wavRiff_t));
  return n;
}
int readProps(File file, wavProperties_t *wavProps){
  int n = file.read((uint8_t *)wavProps, sizeof(wavProperties_t));
  return n;
}

/****************************************
 * WM8978 I2C SETUP
 * Uses the WM8978 I2C library distributed with the NuovoDuino
  *****************************************/
  void wm8978Setup() {
  
    Wire.begin(19,18); //(SDA,SCL,Frequency)
  
    WM8978_Init();

    WM8978_ADDA_Cfg(1, 1);
    WM8978_Input_Cfg(1, 0, 0);
    WM8978_MIC_Gain(0);
    WM8978_AUX_Gain(0);
    WM8978_LINEIN_Gain(0);
    WM8978_SPKvol_Set(10);
    WM8978_HPvol_Set(10, 10); //0-63
    WM8978_EQ_3D_Dir(0);
    WM8978_EQ1_Set(0, 24);
    WM8978_EQ2_Set(0, 24);
    WM8978_EQ3_Set(0, 24);
    WM8978_EQ4_Set(0, 24);
    WM8978_EQ5_Set(0, 24);
    WM8978_I2S_Cfg(2, 0);
    WM8978_Output_Cfg(1, 0);
} //wm8978Setup

void setup()
{
  Serial.begin(115200);
  Serial.print("Initializing SD card...");
  if (!SD.begin(_SD_CS)) {
    Serial.println("initialization failed!");
    return;
  }
  Serial.println("initialization done.");
  delay(1000);
  /* open wav file and process it */
  wav = SD.open("diva5.wav");
  if (wav) {    
    int c = 0;
    int n;
    while (wav.available()) {
      switch(state){
        case HEADER_RIFF:
        wavRiff_t wavRiff;
        n = readRiff(wav, &wavRiff);
        if(n == sizeof(wavRiff_t)){
          if(wavRiff.chunkID == CCCC('R', 'I', 'F', 'F') && wavRiff.format == CCCC('W', 'A', 'V', 'E')){
            state = HEADER_FMT;
            Serial.println("HEADER_RIFF");
          }
        }
        break;
        case HEADER_FMT:
        n = readProps(wav, &wavProps);
        if(n == sizeof(wavProperties_t)){
          state = HEADER_DATA;
          }
        break;
        case HEADER_DATA:
        uint32_t chunkId, chunkSize;
        n = read4bytes(wav, &chunkId);
        if(n == 4){
          if(chunkId == CCCC('d', 'a', 't', 'a')){
            Serial.println("HEADER_DATA");
            }
          }
        n = read4bytes(wav, &chunkSize);
        if(n == 4){
          Serial.println("prepare data");
          state = DATA;
          }
        /*
        //initialize i2s with configurations above
        i2s_driver_install((i2s_port_t)i2s_num, &i2s_config, 0, NULL);
        i2s_set_pin((i2s_port_t)i2s_num, &pin_config);
        //set sample rates of i2s to sample rate of wav file
        i2s_set_sample_rates((i2s_port_t)i2s_num, wavProps.sampleRate); 
        //output clock for I2S0 to CLK_OUT1
        //The ESP32 MCLK (I2S master clock) output can be put out through a CLK_OUT pin only.
        PIN_FUNC_SELECT(PERIPHS_IO_MUX_GPIO0_U, FUNC_GPIO0_CLK_OUT1);
        REG_WRITE(PIN_CTRL, 0xFFFFFFF0);
        */
          wm8978Setup();
          I2S_Init();
          break; 
        /* after processing wav file, it is time to process music data */
        case DATA:
          uint32_t data; 
          n = read4bytes(wav, &data);
          i2s_write_sample_nb(data); 
          //Serial.println(n);
          break;
        }
    }
    wav.close();
  } else {
    Serial.println("error opening test.txt");
  }
  i2s_driver_uninstall((i2s_port_t)i2s_num); //stop & destroy i2s driver 
  Serial.println("done!");
}

void loop()
{
}